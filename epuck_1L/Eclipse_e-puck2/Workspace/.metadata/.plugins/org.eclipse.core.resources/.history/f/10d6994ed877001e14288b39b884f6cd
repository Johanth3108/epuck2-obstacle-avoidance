#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

#include "ch.h"
#include "hal.h"
#include "memory_protection.h"
#include <main.h>
#include "leds.h"
#include "spi_comm.h"//bluetooth
#include "motors.h"
#include "sensors/proximity.h"
#include "selector.h"
#include "sensors/VL53L0X/VL53L0X.h"//distance,not used in task1

//inter process communication bus
messagebus_t bus;
MUTEX_DECL(bus_lock);
CONDVAR_DECL(bus_condvar);



int main(void)
{
    halInit();
    chSysInit();
    mpu_init();

    messagebus_init(&bus, &bus_lock, &bus_condvar);//inter process communication bus

    clear_leds();   //LED
    spi_comm_start();

    motors_init(); //MOTOR

    proximity_start();//proximity
    calibrate_ir();

    int val_proximity[8] = { 0,0,0,0,0,0,0,0 };

    int sum_right;
    int sum_left;

    int times_left = 0;
    int times_right = 0;

    int i = 0;

    while (1)
    {
        chThdSleepMilliseconds(50);

        sum_right = 0;
        sum_left = 0;

        clear_leds();

        for (i = 0; i <= 7; i++)	//read the proximity sensor value
        {
            val_proximity[i] = get_calibrated_prox(i);
        }

        sum_right = val_proximity[0] + val_proximity[1];
        sum_left = val_proximity[6] + val_proximity[7];

        //when entering an dead end road
        if (((val_proximity[0] > 500 || val_proximity[7] > 500) && (val_proximity[2] > 400) && (val_proximity[5] > 400)) == 1)
        {
            left_motor_set_speed(-300);//turn around
            right_motor_set_speed(300);
            chThdSleepMilliseconds(2000);
        }

        //To avoid running circle
        if ((times_left >= 5) || (times_right >= 5))
        {
            times_left = 0;
            times_right = 0;
            left_motor_set_speed(-300);//turn around
            right_motor_set_speed(300);
            chThdSleepMilliseconds(2000);
        }

        //determine to run forward or turn
        if (((val_proximity[0] > 500) || (val_proximity[1] > 500) || (val_proximity[6] > 500) || (val_proximity[7] > 500)) == 0 ) // run forward
        {
            left_motor_set_speed(400);
            right_motor_set_speed(400);

        }

        else		// there's obstacle in front
        {
            if (sum_right >= sum_left)	//turnning left situation
            {
                times_left++;
                times_right = 0;
                left_motor_set_speed(-300);
                right_motor_set_speed(300);
                chThdSleepMilliseconds(50);
                while (val_proximity[1] > 500)
                {
                    val_proximity[1] = get_calibrated_prox(1);
                    left_motor_set_speed(-200);
                    right_motor_set_speed(200);
                    chThdSleepMilliseconds(50);
                }

            }
            else                        //turning right situation
            {
                times_right++;
                times_left = 0;
                left_motor_set_speed(300);
                right_motor_set_speed(-300);
                chThdSleepMilliseconds(50);
                while (val_proximity[6] > 500)
                {
                    val_proximity[6] = get_calibrated_prox(6);
                    left_motor_set_speed(200);
                    right_motor_set_speed(-200);
                    chThdSleepMilliseconds(50);
                }
            }
        }
    }
}

#define STACK_CHK_GUARD 0xe2dee396
uintptr_t __stack_chk_guard = STACK_CHK_GUARD;

void __stack_chk_fail(void)
{
    chSysHalt("Stack smashing detected");
}
